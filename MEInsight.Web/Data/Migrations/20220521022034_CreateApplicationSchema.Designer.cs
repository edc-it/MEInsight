// <auto-generated />
using System;
using MEInsight.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MEInsight.Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220521022034_CreateApplicationSchema")]
    partial class CreateApplicationSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MEInsight.Entities.Core.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Address")
                        .HasMaxLength(384)
                        .HasColumnType("nvarchar(384)")
                        .HasColumnOrder(9);

                    b.Property<string>("Contact")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(6);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrganizationUnit")
                        .HasColumnType("bit")
                        .HasColumnOrder(12);

                    b.Property<bool?>("IsTenant")
                        .HasColumnType("bit")
                        .HasColumnOrder(13);

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnOrder(10);

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnOrder(11);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OrganizationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("ParentOrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5);

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(7);

                    b.Property<string>("RefLocationId")
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(8);

                    b.Property<int>("RefOrganizationTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.HasKey("OrganizationId");

                    b.HasIndex(new[] { "ParentOrganizationId" }, "IX_Organization_ParentOrganizationId");

                    b.HasIndex(new[] { "RefLocationId" }, "IX_Organization_RefLocationId");

                    b.HasIndex(new[] { "RefOrganizationTypeId" }, "IX_Organization_RefOrganizationTypeId");

                    b.ToTable("Organization", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Participant", b =>
                {
                    b.Property<Guid>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasMaxLength(384)
                        .HasColumnType("nvarchar(384)")
                        .HasColumnOrder(20);

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("Disability")
                        .HasColumnType("bit")
                        .HasColumnOrder(12);

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasColumnOrder(16);

                    b.Property<string>("Facebook")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(17);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasColumnOrder(6);

                    b.Property<string>("InstantMessenger")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(18);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasColumnOrder(8);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasColumnOrder(7);

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(15);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<string>("ParticipantCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(5);

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(14);

                    b.Property<int?>("RefDisabilityTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<string>("RefLocationId")
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(19);

                    b.Property<int?>("RefParticipantCohortId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("RefParticipantTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("RefSexId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.HasKey("ParticipantId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Participant_OrganizationId");

                    b.HasIndex(new[] { "RefDisabilityTypeId" }, "IX_Participant_RefDisabilityTypeId");

                    b.HasIndex(new[] { "RefLocationId" }, "IX_Participant_RefLocationId");

                    b.HasIndex(new[] { "RefParticipantCohortId" }, "IX_Participant_RefParticipantCohortId");

                    b.HasIndex(new[] { "RefParticipantTypeId" }, "IX_Participant_RefParticipantTypeId");

                    b.HasIndex(new[] { "RefSexId" }, "IX_Participant_RefSexId");

                    b.ToTable("Participant", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Core.SchoolClassroom", b =>
                {
                    b.Property<Guid>("SchoolClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<int?>("Classes")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("Classrooms")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<int>("RefGradeLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.HasKey("SchoolClassroomId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_SchoolClassroom_OrganizationId");

                    b.HasIndex(new[] { "RefGradeLevelId" }, "IX_SchoolClassroom_RefGradeLevelId");

                    b.ToTable("SchoolClassroom", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Core.SchoolEnrollment", b =>
                {
                    b.Property<Guid>("SchoolEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DisabledFemale")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("DisabledMale")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("Female")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Male")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<int>("RefGradeLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("RefParticipantTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<int>("SchoolPeriodId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.HasKey("SchoolEnrollmentId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_SchoolEnrollment_OrganizationId");

                    b.HasIndex(new[] { "RefGradeLevelId" }, "IX_SchoolEnrollment_RefGradeLevelId");

                    b.HasIndex(new[] { "RefParticipantTypeId" }, "IX_SchoolEnrollment_RefParticipantTypeId");

                    b.HasIndex(new[] { "SchoolPeriodId" }, "IX_SchoolEnrollment_SchoolPeriodId");

                    b.ToTable("SchoolEnrollment", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Core.SchoolPeriod", b =>
                {
                    b.Property<int>("SchoolPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolPeriodId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.HasKey("SchoolPeriodId");

                    b.ToTable("SchoolPeriod", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<bool?>("Closed")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(11);

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(12);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(9);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(14);

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7);

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int?>("RefGradeLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(13);

                    b.HasKey("GroupId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Group_OrganizationId");

                    b.HasIndex(new[] { "ParticipantId" }, "IX_Group_ParticipantId");

                    b.HasIndex(new[] { "ProgramId" }, "IX_Group_ProgramId");

                    b.HasIndex(new[] { "RefGradeLevelId" }, "IX_Group_RefGradeLevelId");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEnrollment", b =>
                {
                    b.Property<Guid>("GroupEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<int?>("Attendance")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefEnrollmentStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8);

                    b.HasKey("GroupEnrollmentId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex(new[] { "GroupId" }, "IX_GroupEnrollment_GroupId");

                    b.HasIndex(new[] { "ParticipantId" }, "IX_GroupEnrollment_ParticipantId");

                    b.HasIndex(new[] { "RefEnrollmentStatusId" }, "IX_GroupEnrollment_RefEnrollmentStatusId");

                    b.ToTable("GroupEnrollment", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEvaluation", b =>
                {
                    b.Property<Guid>("GroupEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EvaluationDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<Guid>("GroupEnrollmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ProgramAssessmentId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefEvaluationStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("Score")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.HasKey("GroupEvaluationId");

                    b.HasIndex("GroupEnrollmentId");

                    b.HasIndex(new[] { "GroupEnrollmentId" }, "IX_GroupEvaluation_GroupEnrollmentId");

                    b.HasIndex(new[] { "ProgramAssessmentId" }, "IX_GroupEvaluation_ProgramAssessmentId");

                    b.HasIndex(new[] { "RefEvaluationStatusId" }, "IX_GroupEvaluation_RefEvaluationStatusId");

                    b.ToTable("GroupEvaluation", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Program", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<bool>("DisplayMarks")
                        .HasColumnType("bit")
                        .HasColumnOrder(9);

                    b.Property<bool>("HasAssessment")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Max")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("Min")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(1);

                    b.Property<int?>("RefAttendanceUnitId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("RefOrganizationTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int?>("RefProgramDeliveryTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefProgramTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("ProgramId");

                    b.HasIndex(new[] { "RefAttendanceUnitId" }, "IX_Program_RefAttendanceUnitId");

                    b.HasIndex(new[] { "RefOrganizationTypeId" }, "IX_Program_RefOrganizationTypeId");

                    b.HasIndex(new[] { "RefProgramDeliveryTypeId" }, "IX_Program_RefProgramDeliveryTypeId");

                    b.HasIndex(new[] { "RefProgramTypeId" }, "IX_Program_RefProgramTypeId");

                    b.ToTable("Program", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.ProgramAssessment", b =>
                {
                    b.Property<int>("ProgramAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramAssessmentId"), 1L, 1);

                    b.Property<string>("AssessmentName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<int?>("CompletionScore")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Max")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("MaximumScore")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("Min")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("MinimumScore")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("RefAssessmentTypeId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefAttendanceUnitId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("RefEvaluationStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<bool>("TrackAttendance")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.HasKey("ProgramAssessmentId");

                    b.HasIndex(new[] { "ProgramId" }, "IX_ProgramAssessment_ProgramId");

                    b.HasIndex(new[] { "RefAssessmentTypeId" }, "IX_ProgramAssessment_RefAssessmentTypeId");

                    b.HasIndex(new[] { "RefAttendanceUnitId" }, "IX_ProgramAssessment_RefAttendanceUnitId");

                    b.HasIndex(new[] { "RefEvaluationStatusId" }, "IX_ProgramAssessment_RefEvaluationStatusId");

                    b.ToTable("ProgramAssessment", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefAssessmentType", b =>
                {
                    b.Property<int>("RefAssessmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefAssessmentTypeId"), 1L, 1);

                    b.Property<string>("AssessmentType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("AssessmentTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefAssessmentTypeId");

                    b.ToTable("RefAssessmentType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefAttendanceUnit", b =>
                {
                    b.Property<int>("RefAttendanceUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefAttendanceUnitId"), 1L, 1);

                    b.Property<string>("AttendanceUnit")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("AttendanceUnitCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("AttendanceUnitId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnOrder(3);

                    b.HasKey("RefAttendanceUnitId");

                    b.ToTable("RefAttendanceUnit", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefDisabilityType", b =>
                {
                    b.Property<int>("RefDisabilityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefDisabilityTypeId"), 1L, 1);

                    b.Property<string>("DisabilityType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("DisabilityTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefDisabilityTypeId");

                    b.ToTable("RefDisabilityType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationAdministratorOffice", b =>
                {
                    b.Property<int>("RefEducationAdministratorOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefEducationAdministratorOfficeId"), 1L, 1);

                    b.Property<string>("EducationAdministratorOffice")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("EducationAdministratorOfficeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefEducationAdministratorOfficeId");

                    b.ToTable("RefEducationAdministratorOffice", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationAdministratorPosition", b =>
                {
                    b.Property<int>("RefEducationAdministratorPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefEducationAdministratorPositionId"), 1L, 1);

                    b.Property<string>("EducationAdministratorPosition")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("EducationAdministratorPositionCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefEducationAdministratorPositionId");

                    b.ToTable("RefEducationAdministratorPosition", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationAdministratorType", b =>
                {
                    b.Property<int>("RefEducationAdministratorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefEducationAdministratorTypeId"), 1L, 1);

                    b.Property<string>("EducationAdministratorType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("EducationAdministratorTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefEducationAdministratorTypeId");

                    b.ToTable("RefEducationAdministratorType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEnrollmentStatus", b =>
                {
                    b.Property<int>("RefEnrollmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefEnrollmentStatusId"), 1L, 1);

                    b.Property<string>("EnrollmentStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("EnrollmentStatusCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefEnrollmentStatusId");

                    b.ToTable("RefEnrollmentStatus", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEvaluationStatus", b =>
                {
                    b.Property<int>("RefEvaluationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefEvaluationStatusId"), 1L, 1);

                    b.Property<string>("EvaluationStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("EvaluationStatusCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefEvaluationStatusId");

                    b.ToTable("RefEvaluationStatus", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefGradeLevel", b =>
                {
                    b.Property<int>("RefGradeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefGradeLevelId"), 1L, 1);

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("GradeLevelCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("GradeLevelId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(3);

                    b.HasKey("RefGradeLevelId");

                    b.ToTable("RefGradeLevel", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefLocation", b =>
                {
                    b.Property<string>("RefLocationId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(0);

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnOrder(4);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(1);

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnOrder(5);

                    b.Property<string>("ParentLocationId")
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(3);

                    b.Property<int>("RefLocationTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("RefLocationId");

                    b.HasIndex(new[] { "ParentLocationId" }, "IX_RefLocation_ParentLocationId");

                    b.HasIndex(new[] { "RefLocationTypeId" }, "IX_RefLocation_RefLocationTypeId");

                    b.ToTable("RefLocation", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefLocationType", b =>
                {
                    b.Property<int>("RefLocationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefLocationTypeId"), 1L, 1);

                    b.Property<int>("LocationLevel")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("LocationTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefLocationTypeId");

                    b.ToTable("RefLocationType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefOrganizationType", b =>
                {
                    b.Property<int>("RefOrganizationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefOrganizationTypeId"), 1L, 1);

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(1);

                    b.Property<string>("OrganizationTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(2);

                    b.HasKey("RefOrganizationTypeId");

                    b.ToTable("RefOrganizationType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefParticipantCohort", b =>
                {
                    b.Property<int>("RefParticipantCohortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefParticipantCohortId"), 1L, 1);

                    b.Property<string>("ParticipantCohort")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("ParticipantCohortCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefParticipantCohortId");

                    b.ToTable("RefParticipantCohort", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefParticipantType", b =>
                {
                    b.Property<int>("RefParticipantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefParticipantTypeId"), 1L, 1);

                    b.Property<string>("ParticipantType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("ParticipantTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefParticipantTypeId");

                    b.ToTable("RefParticipantType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefPartnerSector", b =>
                {
                    b.Property<int>("RefPartnerSectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefPartnerSectorId"), 1L, 1);

                    b.Property<string>("PartnerSector")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("PartnerSectorCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefPartnerSectorId");

                    b.ToTable("RefPartnerSector", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefPartnerType", b =>
                {
                    b.Property<int>("RefPartnerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefPartnerTypeId"), 1L, 1);

                    b.Property<string>("PartnerType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("PartnerTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefPartnerTypeId");

                    b.ToTable("RefPartnerType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefProgramDeliveryType", b =>
                {
                    b.Property<int>("RefProgramDeliveryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefProgramDeliveryTypeId"), 1L, 1);

                    b.Property<string>("ProgramDeliveryType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProgramDeliveryTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("RefProgramDeliveryTypeId");

                    b.ToTable("RefProgramDeliveryType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefProgramType", b =>
                {
                    b.Property<int>("RefProgramTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefProgramTypeId"), 1L, 1);

                    b.Property<string>("ProgramType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProgramTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("RefProgramTypeId");

                    b.ToTable("RefProgramType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolAdministrationType", b =>
                {
                    b.Property<int>("RefSchoolAdministrationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefSchoolAdministrationTypeId"), 1L, 1);

                    b.Property<string>("SchoolAdministrationType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("SchoolAdministrationTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefSchoolAdministrationTypeId");

                    b.ToTable("RefSchoolAdministrationType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolCluster", b =>
                {
                    b.Property<int>("RefSchoolClusterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefSchoolClusterId"), 1L, 1);

                    b.Property<string>("RefLocationId")
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(3);

                    b.Property<string>("SchoolCluster")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("SchoolClusterCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefSchoolClusterId");

                    b.HasIndex(new[] { "RefLocationId" }, "IX_RefSchoolCluster_RefLocationId");

                    b.ToTable("RefSchoolCluster", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolLanguage", b =>
                {
                    b.Property<int>("RefSchoolLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefSchoolLanguageId"), 1L, 1);

                    b.Property<string>("SchoolLanguage")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("SchoolLanguageCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefSchoolLanguageId");

                    b.ToTable("RefSchoolLanguage", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolLocation", b =>
                {
                    b.Property<int>("RefSchoolLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefSchoolLocationId"), 1L, 1);

                    b.Property<string>("SchoolLocation")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("SchoolLocationCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefSchoolLocationId");

                    b.ToTable("RefSchoolLocation", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolStatus", b =>
                {
                    b.Property<int>("RefSchoolStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefSchoolStatusId"), 1L, 1);

                    b.Property<string>("SchoolStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("SchoolStatusCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefSchoolStatusId");

                    b.ToTable("RefSchoolStatus", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolType", b =>
                {
                    b.Property<int>("RefSchoolTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefSchoolTypeId"), 1L, 1);

                    b.Property<string>("SchoolType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("SchoolTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefSchoolTypeId");

                    b.ToTable("RefSchoolType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSex", b =>
                {
                    b.Property<int>("RefSexId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<string>("SexId")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnOrder(2);

                    b.HasKey("RefSexId");

                    b.ToTable("RefSex", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefStudentSpecialization", b =>
                {
                    b.Property<int>("RefStudentSpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefStudentSpecializationId"), 1L, 1);

                    b.Property<string>("StudentSpecialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("StudentSpecializationCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefStudentSpecializationId");

                    b.ToTable("RefStudentSpecialization", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefStudentType", b =>
                {
                    b.Property<int>("RefStudentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefStudentTypeId"), 1L, 1);

                    b.Property<string>("StudentType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("StudentTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefStudentTypeId");

                    b.ToTable("RefStudentType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefStudentYearOfStudy", b =>
                {
                    b.Property<int>("RefStudentYearOfStudyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefStudentYearOfStudyId"), 1L, 1);

                    b.Property<string>("StudentYearOfStudy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("StudentYearOfStudyCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefStudentYearOfStudyId");

                    b.ToTable("RefStudentYearOfStudy", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTeacherEmploymentType", b =>
                {
                    b.Property<int>("RefTeacherEmploymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefTeacherEmploymentTypeId"), 1L, 1);

                    b.Property<string>("TeacherEmploymentType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("TeacherEmploymentTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefTeacherEmploymentTypeId");

                    b.ToTable("RefTeacherEmploymentType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTeacherPosition", b =>
                {
                    b.Property<int>("RefTeacherPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefTeacherPositionId"), 1L, 1);

                    b.Property<string>("TeacherPosition")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("TeacherPositionCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefTeacherPositionId");

                    b.ToTable("RefTeacherPosition", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTeacherType", b =>
                {
                    b.Property<int>("RefTeacherTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefTeacherTypeId"), 1L, 1);

                    b.Property<string>("TeacherType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("TeacherTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefTeacherTypeId");

                    b.ToTable("RefTeacherType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTLMDistributionStatus", b =>
                {
                    b.Property<int>("RefTLMDistributionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefTLMDistributionStatusId"), 1L, 1);

                    b.Property<string>("DistributionStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("DistributionStatusCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefTLMDistributionStatusId");

                    b.ToTable("RefTLMDistributionStatus", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTLMGroup", b =>
                {
                    b.Property<int>("RefTLMGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefTLMGroupId"), 1L, 1);

                    b.Property<string>("TLMGroup")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("TLMGroupCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefTLMGroupId");

                    b.ToTable("RefTLMGroup", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTLMLanguage", b =>
                {
                    b.Property<int>("RefTLMLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefTLMLanguageId"), 1L, 1);

                    b.Property<string>("TLMLanguage")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("TLMLanguageCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefTLMLanguageId");

                    b.ToTable("RefTLMLanguage", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTLMMaterialSet", b =>
                {
                    b.Property<int>("RefTLMMaterialSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefTLMMaterialSetId"), 1L, 1);

                    b.Property<string>("TLMMaterialSet")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("TLMMaterialSetCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefTLMMaterialSetId");

                    b.ToTable("RefTLMMaterialSet", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTLMMaterialType", b =>
                {
                    b.Property<int>("RefTLMMaterialTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefTLMMaterialTypeId"), 1L, 1);

                    b.Property<string>("TLMMaterialType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("TLMMaterialTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefTLMMaterialTypeId");

                    b.ToTable("RefTLMMaterialType", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTLMSubject", b =>
                {
                    b.Property<int>("RefTLMSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefTLMSubjectId"), 1L, 1);

                    b.Property<string>("TLMSubject")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("TLMSubjectCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("RefTLMSubjectId");

                    b.ToTable("RefTLMSubject", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.TLM.TLMDistribution", b =>
                {
                    b.Property<Guid>("TLMDistributionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(11);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrganizationIdFrom")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("OrganizationIdTo")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("ParentTLMDistributionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(12);

                    b.Property<string>("ReceivedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6);

                    b.Property<int?>("RefTLMDistributionStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.Property<int>("TLMDistributionPeriodId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(8);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(10);

                    b.HasKey("TLMDistributionId");

                    b.HasIndex("ParentTLMDistributionId");

                    b.HasIndex("RefTLMDistributionStatusId");

                    b.HasIndex("TLMDistributionPeriodId");

                    b.HasIndex(new[] { "OrganizationIdFrom" }, "IX_TLMDistribution_OrganizationIdFrom");

                    b.HasIndex(new[] { "OrganizationIdTo" }, "IX_TLMDistribution_OrganizationIdTo");

                    b.ToTable("TLMDistribution", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.TLM.TLMDistributionDetail", b =>
                {
                    b.Property<Guid>("TLMDistributionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(6);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("QuantityReceived")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("QuantityShipped")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("TLMDistributionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<int>("TLMMaterialId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.HasKey("TLMDistributionDetailId");

                    b.HasIndex("TLMDistributionId");

                    b.HasIndex("TLMMaterialId");

                    b.ToTable("TLMDistributionDetail", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.TLM.TLMDistributionPeriod", b =>
                {
                    b.Property<int>("TLMDistributionPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TLMDistributionPeriodId"), 1L, 1);

                    b.Property<bool?>("Closed")
                        .HasColumnType("bit")
                        .HasColumnOrder(4);

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.HasKey("TLMDistributionPeriodId");

                    b.ToTable("TLMDistributionPeriod", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.TLM.TLMMaterial", b =>
                {
                    b.Property<int>("TLMMaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TLMMaterialId"), 1L, 1);

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(14);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(384)
                        .HasColumnType("nvarchar(384)")
                        .HasColumnOrder(3);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(13);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RatioDenominator")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<int?>("RatioNumerator")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int?>("RefGradeLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("RefTLMGroupId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("RefTLMLanguageId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("RefTLMMaterialSetId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("RefTLMMaterialTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int?>("RefTLMSubjectId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<string>("TLMMaterialCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("TLMMaterialName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(12);

                    b.HasKey("TLMMaterialId");

                    b.HasIndex("RefGradeLevelId");

                    b.HasIndex("RefTLMGroupId");

                    b.HasIndex("RefTLMLanguageId");

                    b.HasIndex("RefTLMMaterialSetId");

                    b.HasIndex("RefTLMMaterialTypeId");

                    b.HasIndex("RefTLMSubjectId");

                    b.ToTable("TLMMaterial", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Core.EducationAdministrator", b =>
                {
                    b.HasBaseType("MEInsight.Entities.Core.Participant");

                    b.Property<int?>("RefEducationAdministratorOfficeId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefEducationAdministratorPositionId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int?>("RefEducationAdministratorTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasIndex(new[] { "RefEducationAdministratorOfficeId" }, "IX_EducationAdministrator_RefEducationAdministratorOfficeId");

                    b.HasIndex(new[] { "RefEducationAdministratorPositionId" }, "IX_EducationAdministrator_RefEducationAdministratorPositionId");

                    b.HasIndex(new[] { "RefEducationAdministratorTypeId" }, "IX_EducationAdministrator_RefEducationAdministratorTypeId");

                    b.ToTable("EducationAdministrator", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Partner", b =>
                {
                    b.HasBaseType("MEInsight.Entities.Core.Organization");

                    b.Property<string>("PartnerCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<int?>("RefPartnerSectorId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefPartnerTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasIndex(new[] { "RefPartnerSectorId" }, "IX_Partner_RefPartnerSectorId");

                    b.HasIndex(new[] { "RefPartnerTypeId" }, "IX_Partner_RefPartnerTypeId");

                    b.ToTable("Partner", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Core.School", b =>
                {
                    b.HasBaseType("MEInsight.Entities.Core.Organization");

                    b.Property<string>("HeadTeacher")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(10);

                    b.Property<bool?>("IsClusterCenter")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6);

                    b.Property<int?>("RefSchoolAdministrationTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("RefSchoolClusterId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("RefSchoolLanguageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int?>("RefSchoolLocationId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefSchoolStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("RefSchoolTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("SchoolCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.HasIndex(new[] { "PartnerId" }, "IX_School_PartnerId");

                    b.HasIndex(new[] { "RefSchoolAdministrationTypeId" }, "IX_School_RefSchoolAdministrationTypeId");

                    b.HasIndex(new[] { "RefSchoolClusterId" }, "IX_School_RefSchoolClusterId");

                    b.HasIndex(new[] { "RefSchoolLanguageId" }, "IX_School_RefSchoolLanguageId");

                    b.HasIndex(new[] { "RefSchoolLocationId" }, "IX_School_RefSchoolLocationId");

                    b.HasIndex(new[] { "RefSchoolStatusId" }, "IX_School_RefSchoolStatusId");

                    b.HasIndex(new[] { "RefSchoolTypeId" }, "IX_School_RefSchoolTypeId");

                    b.ToTable("School", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Student", b =>
                {
                    b.HasBaseType("MEInsight.Entities.Core.Participant");

                    b.Property<string>("ParentGuardian")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<int?>("RefStudentSpecializationId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefStudentTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int?>("RefStudentYearOfStudyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("StudentCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.HasIndex(new[] { "RefStudentSpecializationId" }, "IX_Student_RefStudentSpecializationId");

                    b.HasIndex(new[] { "RefStudentTypeId" }, "IX_Student_RefStudentTypeId");

                    b.HasIndex(new[] { "RefStudentYearOfStudyId" }, "IX_Student_RefStudentYearOfStudyId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Teacher", b =>
                {
                    b.HasBaseType("MEInsight.Entities.Core.Participant");

                    b.Property<string>("GradeLevels")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(4);

                    b.Property<int?>("RefTeacherEmploymentTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefTeacherPositionId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int?>("RefTeacherTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasIndex(new[] { "RefTeacherEmploymentTypeId" }, "IX_Teacher_RefTeacherEmploymentTypeId");

                    b.HasIndex(new[] { "RefTeacherPositionId" }, "IX_Teacher_RefTeacherPositionId");

                    b.HasIndex(new[] { "RefTeacherTypeId" }, "IX_Teacher_RefTeacherTypeId");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Organization", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", "ParentOrganization")
                        .WithMany("Organizations")
                        .HasForeignKey("ParentOrganizationId");

                    b.HasOne("MEInsight.Entities.Reference.RefLocation", "Locations")
                        .WithMany("Organizations")
                        .HasForeignKey("RefLocationId");

                    b.HasOne("MEInsight.Entities.Reference.RefOrganizationType", "OrganizationTypes")
                        .WithMany("Organizations")
                        .HasForeignKey("RefOrganizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locations");

                    b.Navigation("OrganizationTypes");

                    b.Navigation("ParentOrganization");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Participant", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", "Organizations")
                        .WithMany("Participants")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefDisabilityType", "DisabilityTypes")
                        .WithMany("Participants")
                        .HasForeignKey("RefDisabilityTypeId");

                    b.HasOne("MEInsight.Entities.Reference.RefLocation", "Locations")
                        .WithMany("Participants")
                        .HasForeignKey("RefLocationId");

                    b.HasOne("MEInsight.Entities.Reference.RefParticipantCohort", "ParticipantCohorts")
                        .WithMany("Participants")
                        .HasForeignKey("RefParticipantCohortId");

                    b.HasOne("MEInsight.Entities.Reference.RefParticipantType", "ParticipantTypes")
                        .WithMany("Participants")
                        .HasForeignKey("RefParticipantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefSex", "Sex")
                        .WithMany("Participants")
                        .HasForeignKey("RefSexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisabilityTypes");

                    b.Navigation("Locations");

                    b.Navigation("Organizations");

                    b.Navigation("ParticipantCohorts");

                    b.Navigation("ParticipantTypes");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.SchoolClassroom", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.School", "Schools")
                        .WithMany("SchoolClassrooms")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefGradeLevel", "GradeLevels")
                        .WithMany("SchoolClassrooms")
                        .HasForeignKey("RefGradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeLevels");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.SchoolEnrollment", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.School", "Schools")
                        .WithMany("SchoolEnrollments")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("MEInsight.Entities.Reference.RefGradeLevel", "GradeLevels")
                        .WithMany("SchoolEnrollments")
                        .HasForeignKey("RefGradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefParticipantType", "ParticipantTypes")
                        .WithMany("SchoolEnrollments")
                        .HasForeignKey("RefParticipantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Core.SchoolPeriod", "SchoolPeriods")
                        .WithMany("SchoolEnrollments")
                        .HasForeignKey("SchoolPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeLevels");

                    b.Navigation("ParticipantTypes");

                    b.Navigation("SchoolPeriods");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MEInsight.Entities.Identity.ApplicationUser", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", "Organizations")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Group", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", "Organizations")
                        .WithMany("Groups")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Core.Teacher", "Teachers")
                        .WithMany("Groups")
                        .HasForeignKey("ParticipantId");

                    b.HasOne("MEInsight.Entities.Programs.Program", "Programs")
                        .WithMany("Groups")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefGradeLevel", "GradeLevels")
                        .WithMany("Groups")
                        .HasForeignKey("RefGradeLevelId");

                    b.Navigation("GradeLevels");

                    b.Navigation("Organizations");

                    b.Navigation("Programs");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEnrollment", b =>
                {
                    b.HasOne("MEInsight.Entities.Programs.Group", "Groups")
                        .WithMany("GroupEnrollments")
                        .HasForeignKey("GroupId");

                    b.HasOne("MEInsight.Entities.Core.Participant", "Participants")
                        .WithMany("GroupEnrollments")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefEnrollmentStatus", "EnrollmentStatus")
                        .WithMany("GroupEnrollments")
                        .HasForeignKey("RefEnrollmentStatusId");

                    b.Navigation("EnrollmentStatus");

                    b.Navigation("Groups");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEvaluation", b =>
                {
                    b.HasOne("MEInsight.Entities.Programs.GroupEnrollment", "GroupEnrollments")
                        .WithMany("GroupEvaluations")
                        .HasForeignKey("GroupEnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Programs.ProgramAssessment", "ProgramAssessments")
                        .WithMany("GroupEvaluations")
                        .HasForeignKey("ProgramAssessmentId");

                    b.HasOne("MEInsight.Entities.Reference.RefEvaluationStatus", "EvaluationStatus")
                        .WithMany("GroupEvaluations")
                        .HasForeignKey("RefEvaluationStatusId");

                    b.Navigation("EvaluationStatus");

                    b.Navigation("GroupEnrollments");

                    b.Navigation("ProgramAssessments");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Program", b =>
                {
                    b.HasOne("MEInsight.Entities.Reference.RefAttendanceUnit", "AttendanceUnits")
                        .WithMany("Programs")
                        .HasForeignKey("RefAttendanceUnitId");

                    b.HasOne("MEInsight.Entities.Reference.RefOrganizationType", "OrganizationTypes")
                        .WithMany("Programs")
                        .HasForeignKey("RefOrganizationTypeId");

                    b.HasOne("MEInsight.Entities.Reference.RefProgramDeliveryType", "ProgramDeliveryTypes")
                        .WithMany("Programs")
                        .HasForeignKey("RefProgramDeliveryTypeId");

                    b.HasOne("MEInsight.Entities.Reference.RefProgramType", "ProgramTypes")
                        .WithMany("Programs")
                        .HasForeignKey("RefProgramTypeId");

                    b.Navigation("AttendanceUnits");

                    b.Navigation("OrganizationTypes");

                    b.Navigation("ProgramDeliveryTypes");

                    b.Navigation("ProgramTypes");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.ProgramAssessment", b =>
                {
                    b.HasOne("MEInsight.Entities.Programs.Program", "Programs")
                        .WithMany("ProgramAssessments")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefAssessmentType", "AssessmentTypes")
                        .WithMany("ProgramAssessments")
                        .HasForeignKey("RefAssessmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefAttendanceUnit", "AttendanceUnits")
                        .WithMany("ProgramAssessments")
                        .HasForeignKey("RefAttendanceUnitId");

                    b.HasOne("MEInsight.Entities.Reference.RefEvaluationStatus", "EvaluationStatus")
                        .WithMany("ProgramAssessments")
                        .HasForeignKey("RefEvaluationStatusId");

                    b.Navigation("AssessmentTypes");

                    b.Navigation("AttendanceUnits");

                    b.Navigation("EvaluationStatus");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefLocation", b =>
                {
                    b.HasOne("MEInsight.Entities.Reference.RefLocation", "ParentLocations")
                        .WithMany("Locations")
                        .HasForeignKey("ParentLocationId");

                    b.HasOne("MEInsight.Entities.Reference.RefLocationType", "LocationTypes")
                        .WithMany("Locations")
                        .HasForeignKey("RefLocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationTypes");

                    b.Navigation("ParentLocations");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolCluster", b =>
                {
                    b.HasOne("MEInsight.Entities.Reference.RefLocation", "Locations")
                        .WithMany("SchoolClusters")
                        .HasForeignKey("RefLocationId");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("MEInsight.Entities.TLM.TLMDistribution", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", "OrganizationsFrom")
                        .WithMany("TLMDistributionsFrom")
                        .HasForeignKey("OrganizationIdFrom");

                    b.HasOne("MEInsight.Entities.Core.Organization", "OrganizationsTo")
                        .WithMany("TLMDistributionsTo")
                        .HasForeignKey("OrganizationIdTo");

                    b.HasOne("MEInsight.Entities.TLM.TLMDistribution", "ParentTLMDistributions")
                        .WithMany("TLMDistributions")
                        .HasForeignKey("ParentTLMDistributionId");

                    b.HasOne("MEInsight.Entities.Reference.RefTLMDistributionStatus", "TLMDistributionStatus")
                        .WithMany("TLMDistributions")
                        .HasForeignKey("RefTLMDistributionStatusId");

                    b.HasOne("MEInsight.Entities.TLM.TLMDistributionPeriod", "TLMDistributionPeriods")
                        .WithMany("TLMDistributions")
                        .HasForeignKey("TLMDistributionPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationsFrom");

                    b.Navigation("OrganizationsTo");

                    b.Navigation("ParentTLMDistributions");

                    b.Navigation("TLMDistributionPeriods");

                    b.Navigation("TLMDistributionStatus");
                });

            modelBuilder.Entity("MEInsight.Entities.TLM.TLMDistributionDetail", b =>
                {
                    b.HasOne("MEInsight.Entities.TLM.TLMDistribution", "TLMDistributions")
                        .WithMany("TLMDistributionDetails")
                        .HasForeignKey("TLMDistributionId");

                    b.HasOne("MEInsight.Entities.TLM.TLMMaterial", "TLMMaterials")
                        .WithMany("TLMDistributionDetails")
                        .HasForeignKey("TLMMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TLMDistributions");

                    b.Navigation("TLMMaterials");
                });

            modelBuilder.Entity("MEInsight.Entities.TLM.TLMMaterial", b =>
                {
                    b.HasOne("MEInsight.Entities.Reference.RefGradeLevel", "GradeLevels")
                        .WithMany("TLMMaterials")
                        .HasForeignKey("RefGradeLevelId");

                    b.HasOne("MEInsight.Entities.Reference.RefTLMGroup", "TLMGroups")
                        .WithMany("TLMMaterials")
                        .HasForeignKey("RefTLMGroupId");

                    b.HasOne("MEInsight.Entities.Reference.RefTLMLanguage", "TLMLanguages")
                        .WithMany("TLMMaterials")
                        .HasForeignKey("RefTLMLanguageId");

                    b.HasOne("MEInsight.Entities.Reference.RefTLMMaterialSet", "TLMMaterialSets")
                        .WithMany("TLMMaterials")
                        .HasForeignKey("RefTLMMaterialSetId");

                    b.HasOne("MEInsight.Entities.Reference.RefTLMMaterialType", "TLMMaterialTypes")
                        .WithMany("TLMMaterials")
                        .HasForeignKey("RefTLMMaterialTypeId");

                    b.HasOne("MEInsight.Entities.Reference.RefTLMSubject", "TLMSubjects")
                        .WithMany("TLMMaterials")
                        .HasForeignKey("RefTLMSubjectId");

                    b.Navigation("GradeLevels");

                    b.Navigation("TLMGroups");

                    b.Navigation("TLMLanguages");

                    b.Navigation("TLMMaterialSets");

                    b.Navigation("TLMMaterialTypes");

                    b.Navigation("TLMSubjects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MEInsight.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MEInsight.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MEInsight.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MEInsight.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MEInsight.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MEInsight.Entities.Core.EducationAdministrator", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Participant", null)
                        .WithOne()
                        .HasForeignKey("MEInsight.Entities.Core.EducationAdministrator", "ParticipantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefEducationAdministratorOffice", "EducationAdministratorOffices")
                        .WithMany("EducationAdministrators")
                        .HasForeignKey("RefEducationAdministratorOfficeId");

                    b.HasOne("MEInsight.Entities.Reference.RefEducationAdministratorPosition", "EducationAdministratorPositions")
                        .WithMany("EducationAdministrators")
                        .HasForeignKey("RefEducationAdministratorPositionId");

                    b.HasOne("MEInsight.Entities.Reference.RefEducationAdministratorType", "EducationAdministratorTypes")
                        .WithMany("EducationAdministrators")
                        .HasForeignKey("RefEducationAdministratorTypeId");

                    b.Navigation("EducationAdministratorOffices");

                    b.Navigation("EducationAdministratorPositions");

                    b.Navigation("EducationAdministratorTypes");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Partner", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", null)
                        .WithOne()
                        .HasForeignKey("MEInsight.Entities.Core.Partner", "OrganizationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefPartnerSector", "PartnerSectors")
                        .WithMany("Partners")
                        .HasForeignKey("RefPartnerSectorId");

                    b.HasOne("MEInsight.Entities.Reference.RefPartnerType", "PartnerTypes")
                        .WithMany("Partners")
                        .HasForeignKey("RefPartnerTypeId");

                    b.Navigation("PartnerSectors");

                    b.Navigation("PartnerTypes");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.School", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", null)
                        .WithOne()
                        .HasForeignKey("MEInsight.Entities.Core.School", "OrganizationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Core.Partner", "Partners")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("MEInsight.Entities.Reference.RefSchoolAdministrationType", "SchoolAdministrationTypes")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolAdministrationTypeId");

                    b.HasOne("MEInsight.Entities.Reference.RefSchoolCluster", "SchoolClusters")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolClusterId");

                    b.HasOne("MEInsight.Entities.Reference.RefSchoolLanguage", "SchoolLanguages")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolLanguageId");

                    b.HasOne("MEInsight.Entities.Reference.RefSchoolLocation", "SchoolLocations")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolLocationId");

                    b.HasOne("MEInsight.Entities.Reference.RefSchoolStatus", "SchoolStatus")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolStatusId");

                    b.HasOne("MEInsight.Entities.Reference.RefSchoolType", "SchoolTypes")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolTypeId");

                    b.Navigation("Partners");

                    b.Navigation("SchoolAdministrationTypes");

                    b.Navigation("SchoolClusters");

                    b.Navigation("SchoolLanguages");

                    b.Navigation("SchoolLocations");

                    b.Navigation("SchoolStatus");

                    b.Navigation("SchoolTypes");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Student", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Participant", null)
                        .WithOne()
                        .HasForeignKey("MEInsight.Entities.Core.Student", "ParticipantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefStudentSpecialization", "StudentSpecializations")
                        .WithMany("Students")
                        .HasForeignKey("RefStudentSpecializationId");

                    b.HasOne("MEInsight.Entities.Reference.RefStudentType", "StudentTypes")
                        .WithMany("Students")
                        .HasForeignKey("RefStudentTypeId");

                    b.HasOne("MEInsight.Entities.Reference.RefStudentYearOfStudy", "StudentYearOfStudies")
                        .WithMany("Students")
                        .HasForeignKey("RefStudentYearOfStudyId");

                    b.Navigation("StudentSpecializations");

                    b.Navigation("StudentTypes");

                    b.Navigation("StudentYearOfStudies");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Teacher", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Participant", null)
                        .WithOne()
                        .HasForeignKey("MEInsight.Entities.Core.Teacher", "ParticipantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefTeacherEmploymentType", "TeacherEmploymentTypes")
                        .WithMany("Teachers")
                        .HasForeignKey("RefTeacherEmploymentTypeId");

                    b.HasOne("MEInsight.Entities.Reference.RefTeacherPosition", "TeacherPositions")
                        .WithMany("Teachers")
                        .HasForeignKey("RefTeacherPositionId");

                    b.HasOne("MEInsight.Entities.Reference.RefTeacherType", "TeacherTypes")
                        .WithMany("Teachers")
                        .HasForeignKey("RefTeacherTypeId");

                    b.Navigation("TeacherEmploymentTypes");

                    b.Navigation("TeacherPositions");

                    b.Navigation("TeacherTypes");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Organization", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Organizations");

                    b.Navigation("Participants");

                    b.Navigation("TLMDistributionsFrom");

                    b.Navigation("TLMDistributionsTo");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Participant", b =>
                {
                    b.Navigation("GroupEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.SchoolPeriod", b =>
                {
                    b.Navigation("SchoolEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Group", b =>
                {
                    b.Navigation("GroupEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEnrollment", b =>
                {
                    b.Navigation("GroupEvaluations");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Program", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("ProgramAssessments");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.ProgramAssessment", b =>
                {
                    b.Navigation("GroupEvaluations");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefAssessmentType", b =>
                {
                    b.Navigation("ProgramAssessments");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefAttendanceUnit", b =>
                {
                    b.Navigation("ProgramAssessments");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefDisabilityType", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationAdministratorOffice", b =>
                {
                    b.Navigation("EducationAdministrators");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationAdministratorPosition", b =>
                {
                    b.Navigation("EducationAdministrators");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationAdministratorType", b =>
                {
                    b.Navigation("EducationAdministrators");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEnrollmentStatus", b =>
                {
                    b.Navigation("GroupEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEvaluationStatus", b =>
                {
                    b.Navigation("GroupEvaluations");

                    b.Navigation("ProgramAssessments");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefGradeLevel", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("SchoolClassrooms");

                    b.Navigation("SchoolEnrollments");

                    b.Navigation("TLMMaterials");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefLocation", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Organizations");

                    b.Navigation("Participants");

                    b.Navigation("SchoolClusters");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefLocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefOrganizationType", b =>
                {
                    b.Navigation("Organizations");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefParticipantCohort", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefParticipantType", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("SchoolEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefPartnerSector", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefPartnerType", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefProgramDeliveryType", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefProgramType", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolAdministrationType", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolCluster", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolLanguage", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolLocation", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolStatus", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSchoolType", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSex", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefStudentSpecialization", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefStudentType", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefStudentYearOfStudy", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTeacherEmploymentType", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTeacherPosition", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTeacherType", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTLMDistributionStatus", b =>
                {
                    b.Navigation("TLMDistributions");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTLMGroup", b =>
                {
                    b.Navigation("TLMMaterials");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTLMLanguage", b =>
                {
                    b.Navigation("TLMMaterials");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTLMMaterialSet", b =>
                {
                    b.Navigation("TLMMaterials");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTLMMaterialType", b =>
                {
                    b.Navigation("TLMMaterials");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefTLMSubject", b =>
                {
                    b.Navigation("TLMMaterials");
                });

            modelBuilder.Entity("MEInsight.Entities.TLM.TLMDistribution", b =>
                {
                    b.Navigation("TLMDistributionDetails");

                    b.Navigation("TLMDistributions");
                });

            modelBuilder.Entity("MEInsight.Entities.TLM.TLMDistributionPeriod", b =>
                {
                    b.Navigation("TLMDistributions");
                });

            modelBuilder.Entity("MEInsight.Entities.TLM.TLMMaterial", b =>
                {
                    b.Navigation("TLMDistributionDetails");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.School", b =>
                {
                    b.Navigation("SchoolClassrooms");

                    b.Navigation("SchoolEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Teacher", b =>
                {
                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
